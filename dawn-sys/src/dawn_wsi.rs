/* automatically generated by rust-bindgen */

use crate::webgpu::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub type DawnSwapChainError = *const libc::c_char;
#[repr(C)]
pub struct DawnSwapChainNextTexture {
    pub texture: DawnSwapChainNextTexture__bindgen_ty_1,
}
#[doc = " Backend-specific texture id/name/pointer"]
#[repr(C)]
pub struct DawnSwapChainNextTexture__bindgen_ty_1 {
    pub ptr: __BindgenUnionField<*mut libc::c_void>,
    pub u64: __BindgenUnionField<u64>,
    pub u32: __BindgenUnionField<u32>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_DawnSwapChainNextTexture__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<DawnSwapChainNextTexture__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(DawnSwapChainNextTexture__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<DawnSwapChainNextTexture__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(DawnSwapChainNextTexture__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainNextTexture__bindgen_ty_1>())).ptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainNextTexture__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainNextTexture__bindgen_ty_1>())).u64 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainNextTexture__bindgen_ty_1),
            "::",
            stringify!(u64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainNextTexture__bindgen_ty_1>())).u32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainNextTexture__bindgen_ty_1),
            "::",
            stringify!(u32)
        )
    );
}
impl ::core::fmt::Debug for DawnSwapChainNextTexture__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "DawnSwapChainNextTexture__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_DawnSwapChainNextTexture() {
    assert_eq!(
        ::core::mem::size_of::<DawnSwapChainNextTexture>(),
        8usize,
        concat!("Size of: ", stringify!(DawnSwapChainNextTexture))
    );
    assert_eq!(
        ::core::mem::align_of::<DawnSwapChainNextTexture>(),
        8usize,
        concat!("Alignment of ", stringify!(DawnSwapChainNextTexture))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainNextTexture>())).texture as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainNextTexture),
            "::",
            stringify!(texture)
        )
    );
}
impl ::core::fmt::Debug for DawnSwapChainNextTexture {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "DawnSwapChainNextTexture {{ texture: {:?} }}",
            self.texture
        )
    }
}
#[repr(C)]
pub struct DawnSwapChainImplementation {
    #[doc = " Initialize the swap chain implementation."]
    #[doc = "   (*wsiContext) is one of DawnWSIContext{D3D12,Metal,GL}"]
    pub Init: ::core::option::Option<
        unsafe extern "C" fn(userData: *mut libc::c_void, wsiContext: *mut libc::c_void),
    >,
    #[doc = " Destroy the swap chain implementation."]
    pub Destroy: ::core::option::Option<unsafe extern "C" fn(userData: *mut libc::c_void)>,
    #[doc = " Configure/reconfigure the swap chain."]
    pub Configure: ::core::option::Option<
        unsafe extern "C" fn(
            userData: *mut libc::c_void,
            format: WGPUTextureFormat,
            allowedUsage: WGPUTextureUsage,
            width: u32,
            height: u32,
        ) -> DawnSwapChainError,
    >,
    #[doc = " Acquire the next texture from the swap chain."]
    pub GetNextTexture: ::core::option::Option<
        unsafe extern "C" fn(
            userData: *mut libc::c_void,
            nextTexture: *mut DawnSwapChainNextTexture,
        ) -> DawnSwapChainError,
    >,
    #[doc = " Present the last acquired texture to the screen."]
    pub Present: ::core::option::Option<
        unsafe extern "C" fn(userData: *mut libc::c_void) -> DawnSwapChainError,
    >,
    #[doc = " Each function is called with userData as its first argument."]
    pub userData: *mut libc::c_void,
    #[doc = " For use by the D3D12 and Vulkan backends: how the swapchain will use the texture."]
    pub textureUsage: WGPUTextureUsage,
}
#[test]
fn bindgen_test_layout_DawnSwapChainImplementation() {
    assert_eq!(
        ::core::mem::size_of::<DawnSwapChainImplementation>(),
        56usize,
        concat!("Size of: ", stringify!(DawnSwapChainImplementation))
    );
    assert_eq!(
        ::core::mem::align_of::<DawnSwapChainImplementation>(),
        8usize,
        concat!("Alignment of ", stringify!(DawnSwapChainImplementation))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).Init as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(Init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).Destroy as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(Destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).Configure as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(Configure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).GetNextTexture as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(GetNextTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).Present as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(Present)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).userData as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<DawnSwapChainImplementation>())).textureUsage as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DawnSwapChainImplementation),
            "::",
            stringify!(textureUsage)
        )
    );
}
impl ::core::fmt::Debug for DawnSwapChainImplementation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! ( f , "DawnSwapChainImplementation {{ Init: {:?}, Destroy: {:?}, Configure: {:?}, GetNextTexture: {:?}, Present: {:?}, userData: {:?} }}" , self . Init , self . Destroy , self . Configure , self . GetNextTexture , self . Present , self . userData )
    }
}
